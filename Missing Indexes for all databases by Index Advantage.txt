
-- Missing Indexes for all databases by Index Advantage  (Query 27) (Missing Indexes All Databases)
SELECT      CONVERT(DECIMAL(18, 2), user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage]
          , migs.last_user_seek
          , mid.[statement] AS [Database.Schema.Table]
          , mid.equality_columns
          , mid.inequality_columns
          , mid.included_columns
          , migs.unique_compiles
          , migs.user_seeks
          , migs.avg_total_user_cost
          , migs.avg_user_impact
 FROM       sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
 INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK) ON migs.group_handle = mig.index_group_handle
 INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK) ON mig.index_handle = mid.index_handle
 ORDER BY   index_advantage DESC
OPTION (RECOMPILE);

-- Getting missing index information for all of the databases on the instance is very useful
-- Look at last user seek time, number of user seeks to help determine source and importance
-- Also look at avg_user_impact and avg_total_user_cost to help determine importance
-- SQL Server is overly eager to add included columns, so beware
-- Do not just blindly add indexes that show up from this query!!!


-- Possible Bad NC Indexes (writes > reads)  (Query 55) (Bad NC Indexes)
SELECT      OBJECT_NAME(s.[object_id]) AS [Table Name]
          , i.name AS [Index Name]
          , i.index_id
          , i.is_disabled
          , i.is_hypothetical
          , i.has_filter
          , i.fill_factor
          , user_updates AS [Total Writes]
          , user_seeks + user_scans + user_lookups AS [Total Reads]
          , user_updates - (user_seeks + user_scans + user_lookups) AS [Difference]
 FROM       sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
 INNER JOIN sys.indexes AS i WITH (NOLOCK) ON s.[object_id] = i.[object_id] AND i.index_id = s.index_id
 WHERE      OBJECTPROPERTY(s.[object_id], 'IsUserTable') = 1 AND s.database_id = DB_ID() AND user_updates > (user_seeks + user_scans + user_lookups)
            AND i.index_id > 1
 ORDER BY   [Difference] DESC
          , [Total Writes] DESC
          , [Total Reads] ASC
OPTION (RECOMPILE);

-- Look for indexes with high numbers of writes and zero or very low numbers of reads
-- Consider your complete workload, and how long your instance has been running
-- Investigate further before dropping an index!


-- Missing Indexes for current database by Index Advantage  (Query 56) (Missing Indexes)
SELECT DISTINCT
            CONVERT(DECIMAL(18, 2), user_seeks * avg_total_user_cost * (avg_user_impact * 0.01)) AS [index_advantage]
          , migs.last_user_seek
          , mid.[statement] AS [Database.Schema.Table]
          , mid.equality_columns
          , mid.inequality_columns
          , mid.included_columns
          , migs.unique_compiles
          , migs.user_seeks
          , migs.avg_total_user_cost
          , migs.avg_user_impact
          , OBJECT_NAME(mid.[object_id]) AS [Table Name]
          , p.rows AS [Table Rows]
 FROM       sys.dm_db_missing_index_group_stats AS migs WITH (NOLOCK)
 INNER JOIN sys.dm_db_missing_index_groups AS mig WITH (NOLOCK) ON migs.group_handle = mig.index_group_handle
 INNER JOIN sys.dm_db_missing_index_details AS mid WITH (NOLOCK) ON mig.index_handle = mid.index_handle
 INNER JOIN sys.partitions AS p WITH (NOLOCK) ON p.[object_id] = mid.[object_id]
 WHERE      mid.database_id = DB_ID()
 ORDER BY   index_advantage DESC
OPTION (RECOMPILE);

-- Look at last user seek time, number of user seeks to help determine source and importance
-- SQL Server is overly eager to add included columns, so beware
-- Do not just blindly add indexes that show up from this query!!!


-- Find missing index warnings for cached plans in the current database  (Query 57) (Missing Index Warnings)
-- Note: This query could take some time on a busy instance
SELECT TOP (25)
            OBJECT_NAME(objectid) AS [ObjectName]
          , query_plan
          , cp.objtype
          , cp.usecounts
 FROM       sys.dm_exec_cached_plans AS cp WITH (NOLOCK)
 CROSS APPLY sys.dm_exec_query_plan(cp.plan_handle) AS qp
 WHERE      CAST(query_plan AS NVARCHAR(MAX)) LIKE N'%MissingIndex%' AND dbid = DB_ID()
 ORDER BY   cp.usecounts DESC
OPTION (RECOMPILE);

-- Helps you connect missing indexes to specific stored procedures or queries
-- This can help you decide whether to add them or not


-- Get fragmentation info for all indexes above a certain size in the current database  (Query 62) (Index Fragmentation)
-- Note: This could take some time on a very large database
SELECT      DB_NAME(ps.database_id) AS [Database Name]
          , OBJECT_NAME(ps.object_id) AS [Object Name]
          , i.name AS [Index Name]
          , ps.index_id
          , ps.index_type_desc
          , ps.avg_fragmentation_in_percent
          , ps.fragment_count
          , ps.page_count
          , i.fill_factor
          , i.has_filter
          , i.filter_definition
 FROM       sys.dm_db_index_physical_stats(DB_ID(), NULL, NULL, NULL, N'LIMITED') AS ps
 INNER JOIN sys.indexes AS i WITH (NOLOCK) ON ps.[object_id] = i.[object_id] AND ps.index_id = i.index_id
 WHERE      ps.database_id = DB_ID() AND ps.page_count > 2500
 ORDER BY   ps.avg_fragmentation_in_percent DESC
OPTION (RECOMPILE);

-- Helps determine whether you have framentation in your relational indexes
-- and how effective your index maintenance strategy is


--- Index Read/Write stats (all tables in current DB) ordered by Reads  (Query 63) (Overall Index Usage - Reads)
SELECT      OBJECT_NAME(s.[object_id]) AS [ObjectName]
          , i.index_id
          , i.name AS [IndexName]
          , user_seeks + user_scans + user_lookups AS [Reads]
          , s.user_updates AS [Writes]
          , i.type_desc AS [IndexType]
          , i.fill_factor AS [FillFactor]
          , i.has_filter
          , i.filter_definition
          , s.last_user_scan
          , s.last_user_lookup
          , s.last_user_seek
 FROM       sys.dm_db_index_usage_stats AS s WITH (NOLOCK)
 INNER JOIN sys.indexes AS i WITH (NOLOCK) ON s.[object_id] = i.[object_id]
 WHERE      OBJECTPROPERTY(s.[object_id], 'IsUserTable') = 1 AND i.index_id = s.index_id AND s.database_id = DB_ID()
 ORDER BY   user_seeks + user_scans + user_lookups DESC
OPTION (RECOMPILE); -- Order by reads


SELECT      t.name AS TableName
          , s.name AS SchemaName
          , p.rows AS RowCounts
          , SUM(a.total_pages) * 8 AS TotalSpaceKB
          , CAST(ROUND(((SUM(a.total_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS TotalSpaceMB
          , SUM(a.used_pages) * 8 AS UsedSpaceKB
          , CAST(ROUND(((SUM(a.used_pages) * 8) / 1024.00), 2) AS NUMERIC(36, 2)) AS UsedSpaceMB
          , (SUM(a.total_pages) - SUM(a.used_pages)) * 8 AS UnusedSpaceKB
          , CAST(ROUND(((SUM(a.total_pages) - SUM(a.used_pages)) * 8) / 1024.00, 2) AS NUMERIC(36, 2)) AS UnusedSpaceMB
          , f.name
 FROM       sys.tables t
 INNER JOIN sys.indexes i ON t.object_id = i.object_id
 INNER JOIN sys.filegroups f ON i.data_space_id = f.data_space_id
 INNER JOIN sys.partitions p ON i.object_id = p.object_id AND   i.index_id = p.index_id
 INNER JOIN sys.allocation_units a ON p.partition_id = a.container_id
 LEFT OUTER JOIN sys.schemas s ON t.schema_id = s.schema_id
 WHERE      t.name NOT LIKE 'dt%' AND   t.is_ms_shipped = 0 AND i.object_id > 255 AND   t.name LIKE '%_HX'
            AND  t.name NOT IN (SELECT      t.name FROM sys.tables AS t WHERE   t.is_replicated = 1)
 GROUP BY   t.name
          , s.name
          , p.rows
          , f.name
 ORDER BY   t.name;

SELECT      SCHEMA_NAME(t.schema_id) [schema_name]
          , t.name
          , ix.name
          , CASE
                WHEN ix.is_unique = 1
                    THEN 'UNIQUE '
                ELSE ''
            END
          , ix.type_desc
          , CASE
                WHEN ix.is_padded = 1
                    THEN 'PAD_INDEX = ON, '
                ELSE 'PAD_INDEX = OFF, '
            END + CASE
                      WHEN ix.allow_page_locks = 1
                          THEN 'ALLOW_PAGE_LOCKS = ON, '
                      ELSE 'ALLOW_PAGE_LOCKS = OFF, '
                  END + CASE
                            WHEN ix.allow_row_locks = 1
                                THEN 'ALLOW_ROW_LOCKS = ON, '
                            ELSE 'ALLOW_ROW_LOCKS = OFF, '
                        END + CASE
                                  WHEN INDEXPROPERTY(t.object_id, ix.name, 'IsStatistics') = 1
                                      THEN 'STATISTICS_NORECOMPUTE = ON, '
                                  ELSE 'STATISTICS_NORECOMPUTE = OFF, '
                              END + CASE
                                        WHEN ix.ignore_dup_key = 1
                                            THEN 'IGNORE_DUP_KEY = ON, '
                                        ELSE 'IGNORE_DUP_KEY = OFF, '
                                    END + 'SORT_IN_TEMPDB = OFF, FILLFACTOR =' + CAST(ix.fill_factor AS VARCHAR(3)) AS IndexOptions
          , ix.is_disabled
          , FILEGROUP_NAME(ix.data_space_id) FileGroupName
 FROM       sys.tables t
 INNER JOIN sys.indexes ix ON t.object_id = ix.object_id
 WHERE      ix.type > 0 AND ix.is_primary_key = 0 AND   ix.is_unique_constraint = 0 --and schema_name(tb.schema_id)= @SchemaName and tb.name=@TableName
            AND t.is_ms_shipped = 0 AND t.name <> 'sysdiagrams'
			AND t.is_replicated = 1
 ORDER BY   SCHEMA_NAME(t.schema_id)
          , t.name
          , ix.name;
